#############
# BL MODULE #
#############

Signature-based intrusion detection systems, such as Suricata, often focus on packet features and a few flow features to determine the existence of an attack. Anomaly-based intrusion detection systems such as Zeek focus a lot on flow features, but only a few on dialogues and hosts (these features are often not many and there is the possibility that some anomalies exist outside the scope of these features). Thus, we will propose a new set of features that is wide enough to cover the maximum number of possibly relevant communication-features and their correlations with each attack or type of attack.

We propose to develop a tool that can extract a big set of communication-features from a network capture file, completely ignoring any packet data other than packet metadata. The extracted feature-set contains every possibly-relevant feature we could think of until the moment for the task of threat detection. Similarly to if we were trying to obtain the greatest possible quantity of good juice out of an orange, we try to extract the most out of the network capture file. This is the reason why we will use CICFlowMeter, Bro, Suricata, Maltrail and other known network tools as a basis to take away additional ideas of good features to extract from the PCAP.

This extraction will serve the purpose of gathering expert-chosen communication-features at higher abstraction levels. Network traffic will be abstracted into four main network-objects:
	- Packet
	- Flow
	- Dialogue
	- Host
The packet object is the basis for building the other objects. Flow features enable the construction of dialogue features, and dialogue features enable the construction of host features. I believe that organising network communication-features in different abstraction levels will be important for the success of the detection algorithms.

Signature-based detection will not be used at all by the detection system because we assume all communication is encrypted by default.
We propose to develop a detection system that is focused in network behavior, rather than signatures, because we want to understand and model attack behaviors rather than creating an enormous database of malware signatures that will not work for both encrypted communications and zero-day threats.

We will, however, implement a module (i.e., "blacklist module") that saves relevant IoCs that were caught by our detection system in a blacklist. In order to avoid the blacklisting of false-positive results, the security expert in-charge will be asked for a manual confirmation. The IoC database will be continuously updated and shared with the community. This would also create the opportunity for different entities to collaborating towards shared IoC databases, thus helping each other detect new threats to their businesses.

The blacklist module will detect the presence of C2 servers in a network through the maintained IoC database, and through external and well-known maintained botnet blacklists (depending on the feed, this will include IoCs like C2 IP-addresses, C2 domain-names and a few others.


#############
# BA MODULE #
#############
Each one of the four types of classifier will be tested using different ML algorithms. I have contemplated four types of ML algorithms:
	- Novelty Detection Algorithms
	- Outlier Detection Algorithms
	- Classification Algorithms
	- Regression Algorithms

Novelty detection algorithms will not be tested because the false positive ratio is usually much higher. However, in order to extend this work for generic anomaly and threat detection in the future, we propose the use of such algorithms. An advantage of novelty detection algorithms is that, in order to train and build a model, it will only require the use of regular traffic in the training datasets.

Outlier detection algorithms might be interesting to detect outliers in a big dataset. These algorithms can be used to aid the labeling of botnet traffic, in case it is mixed with regular traffic.

Classification and regression algorithms are very interesting because by fitting the model to labeled data (labels: "r-traffic", "malicious"), we will be able to provide a final classification: "suspicious" or "r-traffic". For classification purposes, the probabilistic output of the regression models will be used to perform a final classification.

After the whole dataset is labeled, it will be splitted in training and testing datasets, as it is usually done for machine-learning model validation. Then, we propose training several ML models using regression and classification ML algorithms:
	- Logistic Regression
	- Gradient Boosting Regression
	- Multi-layered Perceptron Regression
	- K-Nearest Neighbors Regression
	- Random Forest Regression
	- Support Vector Machine Regression
	- Decision Tree Regression
	- Naive Bayes Classification (Gaussian, Bernoulli, Multinomial, Complement)


Finally, these models will be tested against the testing dataset. The ML model evaluation is shown through the usual ML evaluation metrics:
	- Accuracy: represents the probability that an occurrence is correctly classified
	- Recall: represents the TP detection rate
	- Specificity: represents the TN detection rate
	- Fallout: represents the FP detection rate
	- Precision: represents the FN detection rate
	- F1-Score: represents the harmonic mean of precision and recall
	- Matthews Correlation Coefficient (MCC): used in machine learning as a measure of quality for classifications in binary classification problems; it fully considers the TP, TN, FP, and FN rates

In an evaluation phase, the following activities will be performed:
	- Identify the best performing classifiers
	- Determine which features were chosen by the best classifiers
	- Rank each ML algorithm in botnet detection performance

In the end of this phase, we consider the research phase completed. New communication-features might be added later to PCAP-Meter feature-sets resulting from research, but there will not be a re-evaluation of the system accounting these features after the previous evaluation phase.



Thesis Objectives:
	1. Technical Threat Taxonomy problem:
		- Propose a comprehensive technical threat taxonomy (botnet, DDoS, portscan, L7protocol-bruteforce, etc.)
	2. Feature Choice problem:
		- Study every tool and dataset feature-sets
		- Build a comprehensive and organized feature-set based on the previously studied feature-sets
	3. Feature Relevance problem:
		- Use machine learning to find correlations between threats/threat-classes and communication-features
		- Study the best identifying features for each threat-class (e.g.: botnet, DDoS, portscan) and/or specific threat (Mirai, 3ve, emotet, nmap, etc.). The focus will be botnets.
	4. Detection problem:
		- Test state-of-the-art tools (bro ids, suricata, ossim, maltrail, etc.) and analyze their results
		- Build a detection system based on the previously studied threat classes
		- Present our detection results and compare them to the state-of-the-art tools
-------------------------------------------------------------------------------------------------------------------------------------

GLOSSARY:
Threat is a malicious network or end-point event
Malware is a malicious computer program
A Bot is a malware that enables an operator (Bot-master) to remotely control the infected computer system where it is installed (Zombie).
A Zombie is a computer system infected with a Bot.
A Bot-master is the remote operator of a Botnet.
A Botnet is a network of Bots under the remote command of a Bot-master.

Network capture file (PCAP) - 
Indicator of Compromise (IoC) -
IoC-filtered PCAP - 
Command and Control (C&C/C2) - 
Command source - 
Peer-to-peer (P2P) - 
Zero-day - term used to characterize a threat or malware that was not seen before
Network-object - 
Packet - 
Flow -
Dialogue - 
Host - 
Network communication-features - 
Network behavior is defined as all of the network communication-features relevant for modeling threat behavioral patterns.
High abstraction level - 
Intrusion Detection System - 
Zeek - formerly known as Bro, it is an open-source software framework for analysing network traffic that is most commonly used to detect behavioral anomalies on a network for cybersecurity purposes.
Suricata -
Machine Learning (ML) - 
Regression Algorithm - 
Classification Algorithm - 
Outlier Detection - "The training data contains outliers which are defined as observations that are far from the others. Outlier detection estimators thus try to fit the regions where the training data is the most concentrated, ignoring the deviant observations."
Novelty Detection - "The training data is not polluted by outliers and we are interested in detecting whether a new observation is an outlier. In this context an outlier is also called a novelty."
Regular Traffic (r-traffic) - 
Suspicious Traffic (s-traffic) - 
Malicious Traffic (m-traffic) - 
True Positive (TP) - 
True Negative (TN) - 
False Positive (FP) - 
False Negative (FN) - 

GLOSSARY Refs:
https://bricata.com/blog/what-is-bro-ids/
https://scikit-learn.org/stable/modules/outlier_detection.html


Tools like Security Information and Emergency Management, Network Threat Hunting Tools, Intrusion Detection and Prevention Systems, and SOCs, are more common than before. Such systems use netflows and system logs to determine if there is an infection, or pcaps.




